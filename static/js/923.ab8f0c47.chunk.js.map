{"version":3,"file":"static/js/923.ab8f0c47.chunk.js","mappings":"iOAGMA,EAAOC,EAAAA,GAAAA,GAAH,sHAOJC,EAAOD,EAAAA,GAAAA,EAAH,+EAiBV,EAboB,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QACnB,OACI,wBACKA,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAOC,EAAd,EAAcA,QAAd,OACT,UAACP,EAAD,YACI,wBAAMM,KACN,SAACJ,EAAD,UAAOK,MAFAF,EADF,KAQxB,E,8BCHD,EAjBgB,WACZ,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAkBH,GAASI,MAAK,SAAAC,GAC5BN,EAAWM,EAAKC,QACnB,GAEJ,GAAE,CAACN,IACGP,GAAWA,EAAQc,OAAS,GAC/B,SAAC,EAAD,CAAad,QAASA,KAElB,sEAEX,C,6MCVYe,G,QAAMC,IAAAA,OAAa,CAC9BC,QANwB,+BAOxBC,OAAQ,CACNC,QAPmB,uCAqBVC,EAAc,yCAAG,WAAMlB,GAAN,uGAEHa,EAAIM,IAAJ,iBAAkBnB,EAAlB,aAFG,uBAElBU,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,gCAK1BU,EAAAA,GAAAA,MAAY,wBALc,yDAAH,sDASdZ,EAAiB,yCAAG,WAAMR,GAAN,uGAENa,EAAIM,IAAJ,iBAAkBnB,EAAlB,aAFM,uBAErBU,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,gCAK7BU,EAAAA,GAAAA,MAAY,wBALiB,yDAAH,sDASjBC,EAAiB,yCAAG,WAAMC,GAAN,uGAENT,EAAIM,IAAI,gBAAiB,CAAEH,OAAQM,IAF7B,uBAErBZ,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,gCAK7BU,EAAAA,GAAAA,MAAY,wBALiB,yDAAH,sDASjBG,EAAkB,yCAAG,oHAEPV,EAAIM,IAAI,qBAFD,uBAEtBT,EAFsB,EAEtBA,KAFsB,kBAGvBA,GAHuB,gCAK9BU,EAAAA,GAAAA,MAAY,wBALkB,yDAAH,qDASlBI,EAAc,yCAAG,WAAMxB,GAAN,uGAEHa,EAAIM,IAAJ,gBAAiBnB,IAFd,uBAElBU,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,gCAK1BU,EAAAA,GAAAA,MAAY,0BALc,yDAAH,qD","sources":["components/Reviews/ReviewsList.jsx","pages/Reviews.jsx","services/movieApi.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport PropTypes from 'prop-types';\n\nconst Item = styled.li`\nborder-bottom: 1px solid #00000;\nmargin:0;\n&:not(last-child){\n    margin-bottom: 20px;\n}\n`;\nconst Text = styled.p`\ntext-shadow: 1px 2px 1px 0px #000000; color: #f9f5ed;\n`;\n\nconst ReviewsList = ({ reviews }) => {\n    return (\n        <ol>\n            {reviews.map(({ id, author,content }) => (\n                <Item key={id}>\n                    <h2>{ author}</h2>\n                    <Text>{content}</Text>\n                </Item>\n            ))}\n        </ol>\n    );\n};\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            author: PropTypes.string,\n            content: PropTypes.string,\n        })\n    )\n}\n\n\n","import ReviewsList from \"components/Reviews/ReviewsList\";\nimport { useParams } from \"react-router\";\nimport { useState, useEffect } from \"react\";\nimport{fetchMovieReviews} from '../services/movieApi';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        fetchMovieReviews(movieId).then(data => {\n            setReviews(data.results);\n        }\n        )\n    }, [movieId]);\n    return reviews && reviews.length > 0 ? (\n        <ReviewsList reviews={reviews} />\n    ) : (\n            <h2> We don't have any reviews for this movie.</h2>\n    )\n};\n\nexport default Reviews","import axios from \"axios\"; \nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n  export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '8abe8a7c56a54bb229ee6bb6e75e30d4';\n\n\n\nexport const api = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\n\nexport const fetchMovieById = async id => {\n  try {\n    const { data } = await api.get(`movie/${id}`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong');\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  try {\n    const { data } = await api.get(`/movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong');\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const { data } = await api.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong');\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const { data } = await api.get('/search/movie', { params: query });\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong');\n  }\n};\n\nexport const fetchMovieTrending = async () => {\n  try {\n    const { data } = await api.get('/trending/all/day');\n    return data;\n  } catch (error) {\n    toast.error('Something went wrong');\n  }\n};\n\nexport const fetchDataMovie = async id => {\n  try {\n    const { data } = await api.get(`movie/${id}`);\n    return data;\n  } catch (e) {\n    toast.error('Sorry please try again');\n  }\n};"],"names":["Item","styled","Text","reviews","map","id","author","content","useState","setReviews","movieId","useParams","useEffect","fetchMovieReviews","then","data","results","length","api","axios","baseURL","params","api_key","fetchMovieCast","get","toast","fetchSearchMovies","query","fetchMovieTrending","fetchDataMovie"],"sourceRoot":""}